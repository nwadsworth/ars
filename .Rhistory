return(data)
}
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
f <<-formulas
nsam=0
result=rep(0, nsamples)# save the sampling result
data <<-matrix(, nrow= length(xinit), ncol = 4)
data[,1] <<- xinit[order(xinit)]
data[,2] <<- h(data[,1])
data[,3] <<- d(data[,1])
zt <- (tail(data[,2],-1)-head(data[,2],-1)-tail(data[,1],-1)*tail(data[,3],-1)+head(data[,1],-1)*head(data[,3],-1))/(head(data[,3],-1)-tail(data[,3],-1))
data[,4]<<-c(zt,max)
print(data)
while(nsam< nsamples){
sam <- get_sample(f=f, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(sam)
if(accept){
nsam=nsam+1
result[nsam]=sam
}
#print(nsam)
}
return (result)
}
ars(formulas =dnorm, nsamples = 10)
library(pracma)
rm(list=ls())
f <- function(x = 0) {
y <- dnorm(x)
return(y)
}
data=matrix(1:16, ncol=4)
print(data)
u <- function(x) {
i <- findInterval(x, data[, 4]) + 1
return(data[i, 2] + (x - data[i, 1]) * data[i, 3])
}
l <- function(x) {
i <- findInterval(x, data[, 1])
if(i == nrow(data) || i == 0) return(-Inf)
return(((data[i + 1, 1] - x) * data[i, 2] + (x - data[i, 1]) * data[i + 1, 2]) / (data[i + 1, 1] - data[i, 1]))
}
#min=-Inf
get_sample <- function(f=dnorm,y,hp,z){
z=c(-Inf,z)
# make sure hp has no 0, otherwise will be mistakes
intgration <- f(y)/hp*exp(-hp*y)*(exp(hp*tail(z,-1))-exp(hp*head(z,-1)))
intgration <- c(0, intgration)
#print(intgration)
cumint <- cumsum(intgration)/sum(intgration)
t <- runif(1)
index <- findInterval(t,cumint)
print(cumint)
s <- log((t-cumint[index])*exp(hp[index]*y[index])*hp[index]/f(y[index])+exp(hp[index]*z[index]))/hp[index]
return(s)
}
h <- function(x = 0) {
t <- log(f(x))
return(t)
}
d <- function(h, x = 0) {
return(fderiv(h, x, n = 1, method = "central"))
}
test <- function(x){
w=runif(1)
if (w <= exp(l(x)-u(x))){
return(TRUE)
}else if (w<= exp(h(x)-u(x))){
update_step(x)
return(TRUE)
}else{
update_step(x)
return(FALSE)
}
}
update_step <- function(x_star) {
newrow <- c(x_star, h(x_star), d(h, x_star), 0) # the new row will be added
pos <- findInterval(x_star, data[, 1])
if (pos == length(data[, 1])) { # x_star is the largest number
newrow[4] <- max
data[pos, 4] <<- (h(x_star) - h(data[pos, 1]) - x_star * d(h, x_star) + data[pos, 1] * d(h, data[pos, 1])) / (d(h, data[pos, 1]) - d(h, x_star))
} else if (pos == 0) { # x_star is the smallest number
newrow[4] <- (h(data[pos + 1, 1]) - h(x_star) - data[pos + 1, 1] * d(h, data[pos + 1, 1]) + x_star * d(h, x_star)) / (d(h, x_star) - d(h, data[pos + 1, 1]))
} else { # x_star is not the smallest or the largest number
newrow[4] <- (h(data[pos + 1, 1]) - h(x_star) - data[pos + 1, 1] * d(h, data[pos + 1, 1]) + x_star * d(h, x_star)) / (d(h, x_star) - d(h, data[pos + 1, 1]))
data[pos, 4] <<- (h(x_star) - h(data[pos, 1]) - x_star * d(h, x_star) + data[pos, 1] * d(h, data[pos, 1])) / (d(h, data[pos, 1]) - d(h, x_star))
}
data <<- rbind(data, newrow[1:4])
#order the data
data <<- data[order(data[, 1]), ]
return(data)
}
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
f <<-formulas
nsam=0
result=rep(0, nsamples)# save the sampling result
data <<-matrix(, nrow= length(xinit), ncol = 4)
data[,1] <<- xinit[order(xinit)]
data[,2] <<- h(data[,1])
data[,3] <<- d(data[,1])
zt <- (tail(data[,2],-1)-head(data[,2],-1)-tail(data[,1],-1)*tail(data[,3],-1)+head(data[,1],-1)*head(data[,3],-1))/(head(data[,3],-1)-tail(data[,3],-1))
data[,4]<<-c(zt,max)
print(data)
while(nsam< nsamples){
sam <- get_sample(f=f, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(sam)
if(accept){
nsam=nsam+1
result[nsam]=sam
}
#print(nsam)
}
return (result)
}
ars(formulas =dnorm, nsamples = 10)
library(pracma)
rm(list=ls())
f <- function(x = 0) {
y <- dnorm(x)
return(y)
}
data=matrix(1:16, ncol=4)
data[,1]=data[order(data[,1]),1]
data[,4]=data[order(data[,4]),4]
print(data)
u <- function(x) {
i <- findInterval(x, data[, 4]) + 1
return(data[i, 2] + (x - data[i, 1]) * data[i, 3])
}
l <- function(x) {
i <- findInterval(x, data[, 1])
if(i == nrow(data) || i == 0) return(-Inf)
return(((data[i + 1, 1] - x) * data[i, 2] + (x - data[i, 1]) * data[i + 1, 2]) / (data[i + 1, 1] - data[i, 1]))
}
#min=-Inf
get_sample <- function(f=dnorm,y,hp,z){
z=c(-Inf,z)
# make sure hp has no 0, otherwise will be mistakes
intgration <- f(y)/hp*exp(-hp*y)*(exp(hp*tail(z,-1))-exp(hp*head(z,-1)))
intgration <- c(0, intgration)
#print(intgration)
cumint <- cumsum(intgration)/sum(intgration)
t <- runif(1)
index <- findInterval(t,cumint)
print(cumint)
s <- log((t-cumint[index])*exp(hp[index]*y[index])*hp[index]/f(y[index])+exp(hp[index]*z[index]))/hp[index]
return(s)
}
h <- function(x = 0) {
t <- log(f(x))
return(t)
}
d <- function(h, x = 0) {
return(fderiv(h, x, n = 1, method = "central"))
}
test <- function(x){
w=runif(1)
if (w <= exp(l(x)-u(x))){
return(TRUE)
}else if (w<= exp(h(x)-u(x))){
update_step(x)
return(TRUE)
}else{
update_step(x)
return(FALSE)
}
}
update_step <- function(x_star) {
newrow <- c(x_star, h(x_star), d(h, x_star), 0) # the new row will be added
pos <- findInterval(x_star, data[, 1])
if (pos == length(data[, 1])) { # x_star is the largest number
newrow[4] <- max
data[pos, 4] <<- (h(x_star) - h(data[pos, 1]) - x_star * d(h, x_star) + data[pos, 1] * d(h, data[pos, 1])) / (d(h, data[pos, 1]) - d(h, x_star))
} else if (pos == 0) { # x_star is the smallest number
newrow[4] <- (h(data[pos + 1, 1]) - h(x_star) - data[pos + 1, 1] * d(h, data[pos + 1, 1]) + x_star * d(h, x_star)) / (d(h, x_star) - d(h, data[pos + 1, 1]))
} else { # x_star is not the smallest or the largest number
newrow[4] <- (h(data[pos + 1, 1]) - h(x_star) - data[pos + 1, 1] * d(h, data[pos + 1, 1]) + x_star * d(h, x_star)) / (d(h, x_star) - d(h, data[pos + 1, 1]))
data[pos, 4] <<- (h(x_star) - h(data[pos, 1]) - x_star * d(h, x_star) + data[pos, 1] * d(h, data[pos, 1])) / (d(h, data[pos, 1]) - d(h, x_star))
}
data <<- rbind(data, newrow[1:4])
#order the data
data <<- data[order(data[, 1]), ]
return(data)
}
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
f <<-formulas
nsam=0
result=rep(0, nsamples)# save the sampling result
data <<-matrix(, nrow= length(xinit), ncol = 4)
data[,1] <<- xinit[order(xinit)]
data[,2] <<- h(data[,1])
data[,3] <<- d(data[,1])
zt <- (tail(data[,2],-1)-head(data[,2],-1)-tail(data[,1],-1)*tail(data[,3],-1)+head(data[,1],-1)*head(data[,3],-1))/(head(data[,3],-1)-tail(data[,3],-1))
data[,4]<<-c(zt,max)
print(data)
while(nsam< nsamples){
sam <- get_sample(f=f, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(sam)
if(accept){
nsam=nsam+1
result[nsam]=sam
}
#print(nsam)
}
return (result)
}
ars(formulas =dnorm, nsamples = 10)
?fderiv
d <- function(f, x = 0) {
return(fderiv(f, x, n = 1, method = "central")/f(x))
}
d(sin,c(0,1.57))
h <- function(f,x = 0) {
t <- log(f(x))
return(t)
}
d <- function(f, x = 0) {
return(fderiv(f, x, n = 1, method = "central")/f(x))
}
initial(formulas, nsamples, min, max, xinit){
initial<-function(formulas, nsamples, min, max, xinit){
data <-matrix(, nrow= length(xinit), ncol = 4)
data[,1] <- xinit[order(xinit)]
data[,2] <- h(formulas, data[,1])
data[,3] <- d(formulas, data[,1])
zt <- (tail(data[,2],-1)-head(data[,2],-1)-tail(data[,1],-1)*tail(data[,3],-1)+head(data[,1],-1)*head(data[,3],-1))/(head(data[,3],-1)-tail(data[,3],-1))
data[,4]<-c(zt,max)
return(data)
}
initial(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
data <- initial(formulas, nsamples, min, max, xinit)
formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)
data <- initial(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
sam <- get_sample(f=formulas, y=data[,1],hp=data[,3],z=data[,4])
sam <- get_sample(f=dnorm, y=data[,1],hp=data[,3],z=data[,4])
sam
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
data <- initial(formulas, min, max, xinit)
nsam=0
result=rep(0, nsamples)
#while(nsam< nsamples){
sam <- get_sample(f=dnorm, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(sam)
if(accept){
nsam=nsam+1
result[nsam]=sam
}
#print(nsam)
#}
return (result)
}
ars(formulas=dnorm, nsamples=10, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
ars(formulas=dnorm, nsamples=10, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
data <- initial(formulas=formulas, min=min, max=max, xinit=xinit)
nsam=0
result=rep(0, nsamples)
#while(nsam< nsamples){
sam <- get_sample(f=dnorm, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(sam)
if(accept){
nsam=nsam+1
result[nsam]=sam
}
#print(nsam)
#}
return (result)
}
ars(formulas=dnorm, nsamples=10, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
h <- function(f,x = 0) {
t <- log(f(x))
return(t)
}
d <- function(f, x = 0) {
return(fderiv(f, x, n = 1, method = "central")/f(x))
}
update_step <- function(data, f, x_star, min, max) {
newrow <- c(x_star, h(f,x_star), d(f, x_star), 0) # the new row will be added
pos <- findInterval(x_star, data[, 1])
if (pos == length(data[, 1])) { # x_star is the largest number
newrow[4] <- max
data[pos, 4] <- (h(f,x_star) - h(f,data[pos, 1]) - x_star * d(f, x_star) + data[pos, 1] * d(f, data[pos, 1])) / (d(f, data[pos, 1]) - d(f, x_star))
} else if (pos == 0) { # x_star is the smallest number
newrow[4] <- (h(f, data[pos + 1, 1]) - h(f, x_star) - data[pos + 1, 1] * d(f, data[pos + 1, 1]) + x_star * d(f, x_star)) / (d(f, x_star) - d(f, data[pos + 1, 1]))
} else { # x_star is not the smallest or the largest number
newrow[4] <- (h(f, data[pos + 1, 1]) - h(f, x_star) - data[pos + 1, 1] * d(f, data[pos + 1, 1]) + x_star * d(f, x_star)) / (d(f, x_star) - d(f, data[pos + 1, 1]))
data[pos, 4] <- (h(f,x_star) - h(f, data[pos, 1]) - x_star * d(f, x_star) + data[pos, 1] * d(f, data[pos, 1])) / (d(f, data[pos, 1]) - d(f, x_star))
}
data <- rbind(data, newrow[1:4])
#order the data
data <- data[order(data[, 1]), ]
return(data)
}
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
data <- initial(formulas=formulas, min=min, max=max, xinit=xinit)
nsam=0
result=rep(0, nsamples)
#while(nsam< nsamples){
sam <- get_sample(f=dnorm, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(sam)
if(accept){
nsam=nsam+1
result[nsam]=sam
}
#print(nsam)
#}
return (data)
}
ars(formulas=dnorm, nsamples=10, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
data=ars(formulas=dnorm, nsamples=10, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
update_step(data, f=dnorm, x_star=0.75, min=-Inf, max=Inf)
c(TRUE,FALSE)
c[1]
c=c(TRUE,FALSE)
c[1]
c[2]
u <- function(data, x) {
i <- findInterval(x, data[, 4]) + 1
return(data[i, 2] + (x - data[i, 1]) * data[i, 3])
}
l <- function(data, x) {
i <- findInterval(x, data[, 1])
if(i == nrow(data) || i == 0) return(-Inf)
return(((data[i + 1, 1] - x) * data[i, 2] + (x - data[i, 1]) * data[i + 1, 2]) / (data[i + 1, 1] - data[i, 1]))
}
test <- function(data,f,x){# the first return value is accept, the second is update or not.
w=runif(1)
if (w <= exp(l(data, x)-u(data, x))){
return(c(TRUE, FALSE))
}else if (w<= exp(h(f,x)-u(data, x))){
return(c(TRUE, TRUE))
}else{
return(c(FALSE, TRUE))
}
}
test(data, f=dnorm, 1.3)
test(data, f=dnorm, 1.6)
h <- function(f,x = 0) {
t <- log(f(x))
return(t)
}
test(data, f=dnorm, 1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
test(data, f=dnorm, x=1.6)
View(h)
View(data)
test(data, f=dnorm, x=-3)
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
data <- initial(formulas=formulas, min=min, max=max, xinit=xinit)
nsam=0
result=rep(0, nsamples)
while(nsam< nsamples){
sam <- get_sample(f=formulas, y=data[,1],hp=data[,3],z=data[,4])
accept<-test(data, f=formulas, sam)
if(accept[1]){
nsam=nsam+1
result[nsam]=sam
}
if(accept[2]){
data=update_step(data, f=formulas, x_star=sam, min=min, max=max)
}
#print(nsam)
}
return (result)
}
ars(formulas=dnorm, nsamples=10, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
ars(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
get_sample <- function(f=dnorm,y,hp,z, min){
z=c(min,z)
# make sure hp has no 0, otherwise will be mistakes
intgration <- f(y)/hp*exp(-hp*y)*(exp(hp*tail(z,-1))-exp(hp*head(z,-1)))
intgration <- c(0, intgration)
#print(intgration)
cumint <- cumsum(intgration)/sum(intgration)
t <- runif(1)
index <- findInterval(t,cumint)
#print(cumint)
s <- log((t-cumint[index])*exp(hp[index]*y[index])*hp[index]/f(y[index])+exp(hp[index]*z[index]))/hp[index]
return(s)
}
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
data <- initial(formulas=formulas, min=min, max=max, xinit=xinit)
nsam=0
result=rep(0, nsamples)
while(nsam< nsamples){
sam <- get_sample(f=formulas, y=data[,1],hp=data[,3],z=data[,4], min=min)
accept<-test(data, f=formulas, sam)
if(accept[1]){
nsam=nsam+1
result[nsam]=sam
}
if(accept[2]){
data=update_step(data, f=formulas, x_star=sam, min=min, max=max)
}
#print(nsam)
}
return (result)
}
ars(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
res=ars(formulas=dnorm, nsamples=1000, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1))
hist(res,bin=60)
?hist
hist(res,breaks = 60)
res=ars(formulas=dnorm, nsamples=1000, min = -2, max = 2, xinit=c(-1.5,-0.2, 0.5, 1))
hist(res,breaks = 60)
library(pracma)
rm(list=ls())
f <- function(x = 0) {
y <- dnorm(x)
return(y)
}
u <- function(data, x) {
i <- findInterval(x, data[, 4]) + 1
return(data[i, 2] + (x - data[i, 1]) * data[i, 3])
}
l <- function(data, x) {
i <- findInterval(x, data[, 1])
if(i == nrow(data) || i == 0) return(-Inf)
return(((data[i + 1, 1] - x) * data[i, 2] + (x - data[i, 1]) * data[i + 1, 2]) / (data[i + 1, 1] - data[i, 1]))
}
#min=-Inf
get_sample <- function(f=dnorm,y,hp,z, min){
z=c(min,z)
# make sure hp has no 0, otherwise will be mistakes
intgration <- f(y)/hp*exp(-hp*y)*(exp(hp*tail(z,-1))-exp(hp*head(z,-1)))
intgration <- c(0, intgration)
#print(intgration)
cumint <- cumsum(intgration)/sum(intgration)
t <- runif(1)
index <- findInterval(t,cumint)
#print(cumint)
s <- log((t-cumint[index])*exp(hp[index]*y[index])*hp[index]/f(y[index])+exp(hp[index]*z[index]))/hp[index]
return(s)
}
h <- function(f,x = 0) {
t <- log(f(x))
return(t)
}
d <- function(f, x = 0) {
return(fderiv(f, x, n = 1, method = "central")/f(x))
}
test <- function(data,f,x){# the first return value is accept, the second is update or not.
w=runif(1)
if (w <= exp(l(data, x)-u(data, x))){
return(c(TRUE, FALSE))
}else if (w<= exp(h(f,x)-u(data, x))){
return(c(TRUE, TRUE))
}else{
return(c(FALSE, TRUE))
}
}
#test(data, f=dnorm, x=-3)
update_step <- function(data, f, x_star, min, max) {
newrow <- c(x_star, h(f,x_star), d(f, x_star), 0) # the new row will be added
pos <- findInterval(x_star, data[, 1])
if (pos == length(data[, 1])) { # x_star is the largest number
newrow[4] <- max
data[pos, 4] <- (h(f,x_star) - h(f,data[pos, 1]) - x_star * d(f, x_star) + data[pos, 1] * d(f, data[pos, 1])) / (d(f, data[pos, 1]) - d(f, x_star))
} else if (pos == 0) { # x_star is the smallest number
newrow[4] <- (h(f, data[pos + 1, 1]) - h(f, x_star) - data[pos + 1, 1] * d(f, data[pos + 1, 1]) + x_star * d(f, x_star)) / (d(f, x_star) - d(f, data[pos + 1, 1]))
} else { # x_star is not the smallest or the largest number
newrow[4] <- (h(f, data[pos + 1, 1]) - h(f, x_star) - data[pos + 1, 1] * d(f, data[pos + 1, 1]) + x_star * d(f, x_star)) / (d(f, x_star) - d(f, data[pos + 1, 1]))
data[pos, 4] <- (h(f,x_star) - h(f, data[pos, 1]) - x_star * d(f, x_star) + data[pos, 1] * d(f, data[pos, 1])) / (d(f, data[pos, 1]) - d(f, x_star))
}
data <- rbind(data, newrow[1:4])
#order the data
data <- data[order(data[, 1]), ]
return(data)
}
#update_step(data, f=dnorm, x_star=0.75, min=-Inf, max=Inf)
initial<-function(formulas, min, max, xinit){
data <-matrix(, nrow= length(xinit), ncol = 4)
data[,1] <- xinit[order(xinit)]
data[,2] <- h(formulas, data[,1])
data[,3] <- d(formulas, data[,1])
zt <- (tail(data[,2],-1)-head(data[,2],-1)-tail(data[,1],-1)*tail(data[,3],-1)+head(data[,1],-1)*head(data[,3],-1))/(head(data[,3],-1)-tail(data[,3],-1))
data[,4]<-c(zt,max)
return(data)
}
###############################################################################
ars <- function(formulas=dnorm, nsamples=100, min = -Inf, max = Inf, xinit=c(-1.5,-0.2, 5, 1)) {
data <- initial(formulas=formulas, min=min, max=max, xinit=xinit)
nsam=0
result=rep(0, nsamples)
while(nsam< nsamples){
sam <- get_sample(f=formulas, y=data[,1],hp=data[,3],z=data[,4], min=min)
accept<-test(data, f=formulas, sam)
if(accept[1]){
nsam=nsam+1
result[nsam]=sam
}
if(accept[2]){
data=update_step(data, f=formulas, x_star=sam, min=min, max=max)
}
#print(nsam)
}
return (result)
}
res=ars(formulas=dnorm, nsamples=1000, min = -2, max = 2, xinit=c(-1.5,-0.2, 0.5, 1))
hist(res,breaks = 60)
